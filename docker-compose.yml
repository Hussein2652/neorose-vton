services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: vfr
      POSTGRES_PASSWORD: vfr
      POSTGRES_DB: vfr
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 30

  celery_worker:
    build:
      context: .
      dockerfile: ${DOCKERFILE_CELERY:-Dockerfile.api.gpu}
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/2
      - DATABASE_URL=postgresql+psycopg://vfr:vfr@postgres:5432/vfr
      - VFR_CONFIG=/app/configs/pipeline.yaml
      - MODELS_DIR=/app/storage/models
      - LOCKS_DIR=/app/storage/locks
      - HF_HOME=/app/storage/models/hf
      - TORCH_HOME=/app/storage/models/torch
      - PREFETCH_MODELS=1
      - PREFETCH_HF_MODELS=1
      - YOLOV8_POSE_MODEL=/app/storage/models/yolo_v8_pose/v8x/yolov8x-pose.pt
      - REALESRGAN_WEIGHTS=/app/storage/models/realesrgan/x4plus/RealESRGAN_x4plus.pth
      - SDXL_BASE_PATH=/app/storage/models/sdxl_base/1.0/sd_xl_base_1.0.safetensors
      - SDXL_REFINER_PATH=/app/storage/models/sdxl_refiner/1.0/sd_xl_refiner_1.0.safetensors
      - CONTROLNET_UNION_SDXL_DIR=/app/storage/models/snapshots/xinsir-controlnet-union-sdxl-1.0
      - ANNOTATOR_DIR=/app/storage/models/snapshots/lllyasviel-Annotators
      - IP_ADAPTER_SDXL_DIR=/app/storage/models/snapshots/h94-IP-Adapter/sdxl_models
      - IP_ADAPTER_SDXL_WEIGHTS_NAME=ip-adapter_sdxl.safetensors
      - IP_ADAPTER_GARMENT_SCALE=1.0
      - IP_ADAPTER_FACE_SCALE=0.85
      - SDXL_STEPS=50
      - SDXL_GUIDANCE=6.0
      - SDXL_REFINER_STEPS=20
      - SDXL_REFINER_GUIDANCE=5.0
      - CTRL_POSE=0.9
      - CTRL_DEPTH=0.6
      - CTRL_NORMAL=0.5
      - CTRL_SEG=0.35
      - CTRL_EDGE=0.4
      - HF_TOKEN=${HF_TOKEN}
      - HUGGINGFACE_TOKEN=${HF_TOKEN}
      - HUGGINGFACEHUB_API_TOKEN=${HF_TOKEN}
      - HF_HUB_OFFLINE=${HF_HUB_OFFLINE:-1}
      - TRANSFORMERS_OFFLINE=${TRANSFORMERS_OFFLINE:-1}
      - MANUAL_MODELS_DIR=/app/manual_downloads
      - SMPLX_HOME=/app/storage/models/smplx
      - PIXIE_HOME=/app/storage/models/pixie
      - VTON_EXPERT_URL=http://vton_expert:9010
      - VTON_EXPERT_REQUIRED=1
      - SCHP_REPO_DIR=/app/third_party/schp
      - SCHP_MODEL_PATH=/app/storage/models/schp_lip/20190826/exp-schp-201908261155-lip.pth
      - SCHP_INFER_CMD=python scripts/schp_infer.py --weights {WEIGHTS} --image {IMAGE} --out {OUT}
      - S3_BUCKET=vfr
      - S3_REGION=us-east-1
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_PREFIX=vfr/
      - CUDA_VISIBLE_DEVICES=
    depends_on:
      - redis
      - postgres
    command: ["celery", "-A", "backend.app.tasks", "worker", "-l", "INFO", "-c", "1"]
    restart: unless-stopped
    volumes:
      - ./storage:/app/storage
      - ./manual_downloads:/app/manual_downloads:ro
      - ./third_party:/app/third_party
    # Worker runs on CPU; GPU not requested here
    # gpus: ${GPU_REQUEST:-all}

  api:
    build:
      context: .
      dockerfile: ${DOCKERFILE_API:-Dockerfile.api.gpu}
    environment:
      - USE_CELERY=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DATABASE_URL=postgresql+psycopg://vfr:vfr@postgres:5432/vfr
      - REDIS_URL=redis://redis:6379/2
      - VFR_CONFIG=/app/configs/pipeline.yaml
      - STORAGE_BACKEND=local
      - MODELS_DIR=/app/storage/models
      - LOCKS_DIR=/app/storage/locks
      - HF_HOME=/app/storage/models/hf
      - TORCH_HOME=/app/storage/models/torch
      - PREFETCH_MODELS=0
      - PREFETCH_HF_MODELS=0
      - MODELS_CONFIG=/app/configs/models.yaml
      - YOLOV8_POSE_MODEL=/app/storage/models/yolo_v8_pose/v8x/yolov8x-pose.pt
      - REALESRGAN_WEIGHTS=/app/storage/models/realesrgan/x4plus/RealESRGAN_x4plus.pth
      - SDXL_BASE_PATH=/app/storage/models/sdxl_base/1.0/sd_xl_base_1.0.safetensors
      - SDXL_REFINER_PATH=/app/storage/models/sdxl_refiner/1.0/sd_xl_refiner_1.0.safetensors
      - CONTROLNET_UNION_SDXL_DIR=/app/storage/models/snapshots/xinsir-controlnet-union-sdxl-1.0
      - ANNOTATOR_DIR=/app/storage/models/snapshots/lllyasviel-Annotators
      - IP_ADAPTER_SDXL_DIR=/app/storage/models/snapshots/h94-IP-Adapter/sdxl_models
      - IP_ADAPTER_SDXL_WEIGHTS_NAME=ip-adapter_sdxl.safetensors
      - IP_ADAPTER_GARMENT_SCALE=1.0
      - HF_TOKEN=${HF_TOKEN}
      - HUGGINGFACE_TOKEN=${HF_TOKEN}
      - HUGGINGFACEHUB_API_TOKEN=${HF_TOKEN}
      - HF_HUB_OFFLINE=${HF_HUB_OFFLINE:-1}
      - TRANSFORMERS_OFFLINE=${TRANSFORMERS_OFFLINE:-1}
      - MANUAL_MODELS_DIR=/app/manual_downloads
      - SMPLX_HOME=/app/storage/models/smplx
      - PIXIE_HOME=/app/storage/models/pixie
      - SCHP_REPO_DIR=/app/third_party/schp
      - SCHP_MODEL_PATH=/app/storage/models/schp_lip/20190826/exp-schp-201908261155-lip.pth
      - SCHP_INFER_CMD=python scripts/schp_infer.py --weights {WEIGHTS} --image {IMAGE} --out {OUT}
      - AUTH_REQUIRED=0
      - RATE_LIMIT_ENABLED=0
      - RL_LIMIT=60
      - RL_WINDOW=60
      - REMOTE_FINISHER_URL=http://remote_worker:9000
      - REMOTE_VTON_URL=http://remote_worker:9000
      - S3_BUCKET=vfr
      - S3_REGION=us-east-1
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_PREFIX=vfr/
      - RESULT_REDIRECT=1
      - VTON_EXPERT_URL=http://vton_expert:9010
      - CUDA_VISIBLE_DEVICES=
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - postgres
      - celery_worker
      - migrate
      - remote_worker
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport sys, urllib.request\ntry:\n  r = urllib.request.urlopen('http://localhost:8000/health', timeout=2)\n  sys.exit(0 if r.status==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 90s
    volumes:
      - ./storage:/app/storage
      - ./manual_downloads:/app/manual_downloads:ro
      - ./third_party:/app/third_party
    # Run API on CPU to free GPU VRAM for expert
    # gpus: ${GPU_REQUEST:-all}

  migrate:
    build:
      context: .
      dockerfile: ${DOCKERFILE_API:-Dockerfile.api.gpu}
    environment:
      - DATABASE_URL=postgresql+psycopg://vfr:vfr@postgres:5432/vfr
    depends_on:
      - postgres
    command: ["alembic", "upgrade", "head"]

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio_data:/data

  minio_setup:
    image: minio/mc:latest
    restart: on-failure
    depends_on:
      - minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - S3_BUCKET=vfr
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "sleep 2 && \
      mc alias set local http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD && \
      mc mb -p local/$$S3_BUCKET || true && \
      mc anonymous set download local/$$S3_BUCKET || true && \
      echo 'MinIO bucket ready'"

  remote_worker:
    build:
      context: .
      dockerfile: Dockerfile.remote
    ports:
      - "9002:9000"
    restart: unless-stopped

  vton_expert:
    build:
      context: .
      dockerfile: Dockerfile.vton_stable
    environment:
      - PYTHONUNBUFFERED=1
      - CUDA_VISIBLE_DEVICES=0
      - STABLEVITON_WEIGHTS_DIR=/app/storage/models/stableviton/weights
      - STABLEVITON_INFER_CMD=python /app/infer_wrapper.py --config_path third_party/stableviton/StableVITON-master/configs/VITONHD.yaml --model_load_path {WEIGHTS_DIR}/VITONHD_PBE_pose.ckpt --data_root_dir {DATA_ROOT} --batch_size 1 --img_H 640 --img_W 512 --save_dir {OUT} --unpair
      - SCHP_REPO_DIR=/app/third_party/schp/Self-Correction-Human-Parsing-master
      - SCHP_MODEL_PATH=/app/storage/models/schp_lip/20190826/exp-schp-201908261155-lip.pth
      - SCHP_INFER_CMD=python scripts/schp_infer.py --weights {WEIGHTS} --image {IMAGE} --out {OUT}
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128,garbage_collection_threshold:0.9
      - XFORMERS_MEMORY_EFFICIENT_ATTENTION=1
      - HF_HOME=/app/storage/models/hf
      - HF_TOKEN=${HF_TOKEN}
      - HUGGINGFACE_TOKEN=${HF_TOKEN}
      - HUGGINGFACEHUB_API_TOKEN=${HF_TOKEN}
      - TRANSFORMERS_OFFLINE=${TRANSFORMERS_OFFLINE:-1}
      - HF_HUB_OFFLINE=${HF_HUB_OFFLINE:-1}
      - STABLEVITON_STRICT=1
      # Allow graceful fallback and verbose errors
      - STABLEVITON_STRICT=0
      - STABLEVITON_VERBOSE=1
      - STABLEVITON_FALLBACK=0
      - STABLEVITON_FORCE_FP16=1
      - STABLEVITON_DENOISE_STEPS=50
      - STABLEVITON_DEBUG=1
      - STV_MAX_H=640
      - STV_MAX_W=512
      - DENSEPOSE_CFG=${DENSEPOSE_CFG:-/app/storage/models/densepose/densepose_rcnn_R_50_FPN_s1x.yaml}
      - DENSEPOSE_WEIGHTS=${DENSEPOSE_WEIGHTS:-/app/storage/models/densepose/densepose_rcnn_R_50_FPN_s1x.pkl}
      - DENSEPOSE_CFG_URL=${DENSEPOSE_CFG_URL:-https://raw.githubusercontent.com/facebookresearch/detectron2/main/projects/DensePose/configs/densepose_rcnn_R_50_FPN_s1x.yaml}
      - DENSEPOSE_WEIGHTS_URL=${DENSEPOSE_WEIGHTS_URL:-https://dl.fbaipublicfiles.com/densepose/densepose_rcnn_R_50_FPN_s1x/165712039/model_final_162be9.pkl}
    ports:
      - "9010:9010"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9010/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
    volumes:
      - ./third_party:/app/third_party:ro
      - ./storage:/app/storage
    restart: unless-stopped
    gpus: ${GPU_REQUEST:-all}

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - api

  grafana:
    image: grafana/grafana-oss:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  pgdata:
  minio_data:
