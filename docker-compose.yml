services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: vfr
      POSTGRES_PASSWORD: vfr
      POSTGRES_DB: vfr
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 30

  celery_worker:
    build:
      context: .
      dockerfile: ${DOCKERFILE_CELERY:-Dockerfile.api.gpu}
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DATABASE_URL=postgresql+psycopg://vfr:vfr@postgres:5432/vfr
      - VFR_CONFIG=/app/configs/pipeline.yaml
      - MODELS_DIR=/app/storage/models
      - LOCKS_DIR=/app/storage/locks
      - HF_HOME=/app/storage/models/hf
      - TORCH_HOME=/app/storage/models/torch
      - PREFETCH_MODELS=1
      - PREFETCH_HF_MODELS=0
      - YOLOV8_POSE_MODEL=/app/storage/models/yolo_v8_pose/v8x/yolov8x-pose.pt
      - REALESRGAN_WEIGHTS=/app/storage/models/realesrgan/x4plus/RealESRGAN_x4plus.pth
      - SDXL_BASE_PATH=/app/storage/models/sdxl_base/1.0/sd_xl_base_1.0.safetensors
      - SDXL_REFINER_PATH=/app/storage/models/sdxl_refiner/1.0/sd_xl_refiner_1.0.safetensors
      - CONTROLNET_UNION_SDXL_DIR=/app/storage/models/snapshots/xinsir-controlnet-union-sdxl-1.0
      - ANNOTATOR_DIR=/app/storage/models/snapshots/lllyasviel-Annotators
      - HF_HUB_OFFLINE=1
      - TRANSFORMERS_OFFLINE=1
      - MANUAL_MODELS_DIR=/app/manual_downloads
      - SMPLX_HOME=/app/storage/models/smplx
      - PIXIE_HOME=/app/storage/models/pixie
      - S3_BUCKET=vfr
      - S3_REGION=us-east-1
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_PREFIX=vfr/
    depends_on:
      - redis
      - postgres
    command: ["celery", "-A", "backend.app.tasks", "worker", "-l", "INFO"]
    restart: unless-stopped
    volumes:
      - ./storage:/app/storage
      - ./manual_downloads:/app/manual_downloads:ro
    gpus: ${GPU_REQUEST:-all}

  api:
    build:
      context: .
      dockerfile: ${DOCKERFILE_API:-Dockerfile.api.gpu}
    environment:
      - USE_CELERY=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DATABASE_URL=postgresql+psycopg://vfr:vfr@postgres:5432/vfr
      - REDIS_URL=redis://redis:6379/2
      - VFR_CONFIG=/app/configs/pipeline.yaml
      - STORAGE_BACKEND=local
      - MODELS_DIR=/app/storage/models
      - LOCKS_DIR=/app/storage/locks
      - HF_HOME=/app/storage/models/hf
      - TORCH_HOME=/app/storage/models/torch
      - PREFETCH_MODELS=1
      - PREFETCH_HF_MODELS=0
      - MODELS_CONFIG=/app/configs/models.yaml
      - YOLOV8_POSE_MODEL=/app/storage/models/yolo_v8_pose/v8x/yolov8x-pose.pt
      - REALESRGAN_WEIGHTS=/app/storage/models/realesrgan/x4plus/RealESRGAN_x4plus.pth
      - SDXL_BASE_PATH=/app/storage/models/sdxl_base/1.0/sd_xl_base_1.0.safetensors
      - SDXL_REFINER_PATH=/app/storage/models/sdxl_refiner/1.0/sd_xl_refiner_1.0.safetensors
      - CONTROLNET_UNION_SDXL_DIR=/app/storage/models/snapshots/xinsir-controlnet-union-sdxl-1.0
      - ANNOTATOR_DIR=/app/storage/models/snapshots/lllyasviel-Annotators
      - HF_HUB_OFFLINE=1
      - TRANSFORMERS_OFFLINE=1
      - MANUAL_MODELS_DIR=/app/manual_downloads
      - SMPLX_HOME=/app/storage/models/smplx
      - PIXIE_HOME=/app/storage/models/pixie
      - AUTH_REQUIRED=0
      - RATE_LIMIT_ENABLED=1
      - RL_LIMIT=60
      - RL_WINDOW=60
      - REMOTE_FINISHER_URL=http://remote_worker:9000
      - REMOTE_VTON_URL=http://remote_worker:9000
      - S3_BUCKET=vfr
      - S3_REGION=us-east-1
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=minioadmin
      - S3_SECRET_ACCESS_KEY=minioadmin
      - S3_PREFIX=vfr/
      - RESULT_REDIRECT=1
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - postgres
      - celery_worker
      - migrate
      - remote_worker
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport sys, urllib.request\ntry:\n  r = urllib.request.urlopen('http://localhost:8000/health', timeout=2)\n  sys.exit(0 if r.status==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"]
      interval: 5s
      timeout: 5s
      retries: 30
    volumes:
      - ./storage:/app/storage
      - ./manual_downloads:/app/manual_downloads:ro
    gpus: ${GPU_REQUEST:-all}

  migrate:
    build:
      context: .
      dockerfile: ${DOCKERFILE_API:-Dockerfile.api.gpu}
    environment:
      - DATABASE_URL=postgresql+psycopg://vfr:vfr@postgres:5432/vfr
    depends_on:
      - postgres
    command: ["alembic", "upgrade", "head"]

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio_data:/data

  minio_setup:
    image: minio/mc:latest
    restart: on-failure
    depends_on:
      - minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - S3_BUCKET=vfr
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "sleep 2 && \
      mc alias set local http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD && \
      mc mb -p local/$$S3_BUCKET || true && \
      mc anonymous set download local/$$S3_BUCKET || true && \
      echo 'MinIO bucket ready'"

  remote_worker:
    build:
      context: .
      dockerfile: Dockerfile.remote
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - api

  grafana:
    image: grafana/grafana-oss:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  pgdata:
  minio_data:
